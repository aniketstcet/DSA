09. Binary Tree
-----------------
==================================================
1. Binary Tree.java
------------------------------------
import java.io.*;
import java.util.*;

public class Main {
  public static class Node {
    int data;
    Node left;
    Node right;

    Node(int data) {
      this.data = data;
    }
  }

  public static class Pair {
    Node node;
    int state;

    Pair(Node node, int state) {
      this.node = node;
      this.state = state;
    }
  }

  public static Node construct(Integer[] arr) {
        Stack<Pair> stk = new Stack<>();
        Node root = new Node(arr[0]);
        stk.push(new Pair(root, -1));
        int idx = 0;
        
        while(!stk.isEmpty()){
            
            Pair par = stk.peek();
            
            if(par.state == -1){
                // preorder
                idx++;
                
                if(arr[idx] != null){
                    Node child = new Node(arr[idx]);
                    par.node.left = child;
                    stk.push(new Pair(child, -1));
                }
                par.state++;
                
            } else if(par.state == 0){
                // inorder
                idx++;
                
                if(arr[idx] != null){
                    Node child = new Node(arr[idx]);
                    par.node.right = child;
                    stk.push(new Pair(child, -1));
                }
                par.state++;
                
            } else if(par.state == 1){
                // postorder
                stk.pop();
            }
        }
        
        return root;
  }

  public static void print(Node node){
    
    if(node.left != null) 
        System.out.print(node.left.data);
    else System.out.print(".");
    
    System.out.print(" <- " + node.data + " -> ");
    
    if(node.right != null) 
        System.out.print(node.right.data);
    else System.out.print(".");
    
    System.out.println();
  }
  
  public static void display(Node node) {
      if(node == null) return;
      print(node);
      
      // preorder
      display(node.left);
      // inorder
      display(node.right);
      // postorder
  }

  public static int size(Node node) {
        if(node == null) return 0;
        
        int leftSize = size(node.left);
        int rightSize = size(node.right);
        return 1 + leftSize + rightSize;
        // return 1 + size(node.left) + size(node.right);
  }

  public static int sum(Node node) {
        if(node == null) return 0;
        
        int leftSum = sum(node.left);
        int rightSum = sum(node.right);
        return node.data + leftSum + rightSum;
  }

  public static int max(Node node) {
      if(node == null) return Integer.MIN_VALUE;
      
      int leftMax = max(node.left);
      int rightMax = max(node.right);
      return Math.max(node.data, Math.max(leftMax, rightMax));
  }

//   public static int height(Node node) {
//       if(node == null) return 0;
      
//       // in terms of nodes
//       int leftHeight = height(node.left);
//       int rightHeight = height(node.right);
//       return Math.max(leftHeight, rightHeight) + 1;
//   }

  public static int height(Node node){
      if(node == null) return 0;
      
      int leftHeight = 0, rightHeight = 0;
      
      if(node.left != null){
        leftHeight = 1 + height(node.left);
      }
      
      if(node.right != null){
          rightHeight = 1 + height(node.right);
      }
      
      return Math.max(leftHeight, rightHeight);
  }

  public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    int n = Integer.parseInt(br.readLine());
    Integer[] arr = new Integer[n];
    String[] values = br.readLine().split(" ");
    for (int i = 0; i < n; i++) {
      if (values[i].equals("n") == false) {
        arr[i] = Integer.parseInt(values[i]);
      } else {
        arr[i] = null;
      }
    }

    Node root = construct(arr);
    // display(root);
    
    int size = size(root);
    int sum = sum(root);
    int max = max(root);
    int ht = height(root);
    System.out.println(size);
    System.out.println(sum);
    System.out.println(max);
    System.out.println(ht);
  }

}
===================================================
2.Diameter - Binary Tree.java
------------------------------------
 // we are returning diameter
  // o(n^2) solution
  public static int diameter1(Node node) {
      if(node == null) return 0;
      
      int lDia = diameter1(node.left);
      int rDia = diameter1(node.right);
      
      // meeting expectation
      int lh = height(node.left);
      int rh = height(node.right);
      int dia = lh + rh + 2;
      
      return Math.max(dia, Math.max(lDia, rDia));
  }
  
  static int maxDiameter = 0;
  // we are returning height, but calculating diameter
  // global variable (travel & change) strategy
  public static int diameter2(Node node){
    if (node == null) {
      return -1;
    }

    int lh = diameter2(node.left);
    int rh = diameter2(node.right);

    int dia = lh + rh + 2;
    maxDiameter = Math.max(maxDiameter, dia);

    return Math.max(lh, rh) + 1;
  }
  
  
  public static class diaPair{
    int height;
    int diameter;
    
    public diaPair(){
        height = -1;
        diameter = 0;
    }
  }
  
  // Return both diameter & height
  public static diaPair diameter3(Node node){
      if(node == null)
          return new diaPair();
          
      diaPair l = diameter3(node.left);
      diaPair r = diameter3(node.right);
      
      diaPair curr = new diaPair();
      curr.height = Math.max(l.height, r.height) + 1;
      
      int dia = l.height + r.height + 2;
      curr.diameter = Math.max(dia, Math.max(l.diameter, r.diameter));
      
      return curr;
  }


    // System.out.println(diameter1(root));
    
    // diameter2(root);
    // System.out.println(maxDiameter);
    
    // diaPair ans = diameter3(root);
    // System.out.println(ans.diameter);
===================================================
3.K Distance Away.java 
-------------------------------
public static ArrayList<Node> nodeToRootPath(Node node, int data){
      if(node == null) // negative base case 
         return new ArrayList<>();
      
      if(node.data == data){ // positive base case
         ArrayList<Node> base = new ArrayList<>();
         base.add(node);
         return base;
      }
      
      ArrayList<Node> lres = nodeToRootPath(node.left, data);
      if(lres.size() > 0){
          lres.add(node);
          return lres;
      }
      
      ArrayList<Node> rres = nodeToRootPath(node.right, data);
      if(rres.size() > 0){
          rres.add(node);
          return rres;
      }
      
      return new ArrayList<>();
  }
  
  public static void printKLevelsDown(Node node, int k, Node blockage){
    if(node == null || k < 0 || node == blockage) 
        return;
    if(k == 0){
        System.out.println(node.data);
        return;
    }
    
    printKLevelsDown(node.left, k - 1, blockage);
    printKLevelsDown(node.right, k - 1, blockage);
  }
  
  public static void printKNodesFar(Node node, int data, int k) {
    ArrayList<Node> n2rpath = nodeToRootPath(node, data);
    
    int distance = k;
    for(int i=0; i<n2rpath.size(); i++){
        if(distance < 0) break;
        Node blockage = (i == 0) ? null : n2rpath.get(i - 1);    
        printKLevelsDown(n2rpath.get(i), distance, blockage);
        distance--;
    }
  }

===================================================
4.K Levels Down.java
----------------------------------
  public static void printKLevelsDown(Node node, int k){
    if(node == null || k < 0) return;
    if(k == 0){
        System.out.println(node.data);
        return;
    }
    
    printKLevelsDown(node.left, k - 1);
    printKLevelsDown(node.right, k - 1);
  }
===================================================
5.Left Cloned Tree.java 
------------------------------------
// Create Left Clone with return type
public static Node createLeftCloneTree(Node node){
      if(node == null) return null;
      
      Node leftRoot = createLeftCloneTree(node.left);
      Node rightRoot = createLeftCloneTree(node.right);
      
      Node copyNode = new Node(node.data);
      copyNode.left = leftRoot;
      node.left = copyNode;
      
      return node;
  }

// Create Left Clone without return type
public static void createLeftCloneTree(Node node){
      if(node == null) return;
      
      createLeftCloneTree(node.left);
      createLeftCloneTree(node.right);
      
      Node copyNode = new Node(node.data);
      copyNode.left = node.left;
      node.left = copyNode;
  }

// Transform back to Normal Tree
public static Node transBackFromLeftClonedTree(Node node){
      if(node == null) return null;
      
      // faith
      Node leftRoot = transBackFromLeftClonedTree(node.left.left);
      Node rightRoot = transBackFromLeftClonedTree(node.right);
      
      // meeting expectation -> delete our duplicate
      node.left = leftRoot;
      return node;
  }
===================================================
6. Node Paths.java 
------------------------------------
public static boolean find(Node node, int data){
     if(node == null) return false;
     // return (node.data == data) ? true : (find(node.left, data) || find(node.right, data));
     
     if(node.data == data) return true;
     
     boolean lres = find(node.left, data);
     if(lres == true) return true;
     
     boolean rres = find(node.right, data);
     if(rres == true) return true;
     
     return false;
  }
  
  public static ArrayList<Integer> nodeToRootPath(Node node, int data){
      if(node == null) // negative base case 
         return new ArrayList<>();
      
      if(node.data == data){ // positive base case
         ArrayList<Integer> base = new ArrayList<>();
         base.add(node.data);
         return base;
      }
      
      ArrayList<Integer> lres = nodeToRootPath(node.left, data);
      if(lres.size() > 0){
          lres.add(node.data);
          return lres;
      }
      
      ArrayList<Integer> rres = nodeToRootPath(node.right, data);
      if(rres.size() > 0){
          rres.add(node.data);
          return rres;
      }
      
      return new ArrayList<>();
  }
  
  public static boolean rootToNodePath(Node node, int data, ArrayList<Integer> curr){
    if(node == null) return false;
    
    if(node.data == data){
        curr.add(node.data);
        return true;
    }
    
    curr.add(node.data);
    
    boolean left = rootToNodePath(node.left, data, curr);
    if(left == true) return true;
    boolean right = rootToNodePath(node.right, data, curr);
    if(right == true) return true;
    
    curr.remove(curr.size() - 1);
    return false;
  }
  
  public static void allRootToNodePath(Node node, int data, ArrayList<Integer> curr, ArrayList<ArrayList<Integer>> res){
      if(node == null) // negative base case 
         return;
      
      curr.add(node.data);
         
      if(node.data == data){ // positive base case
         System.out.println(curr);
         
         ArrayList<Integer> temp = new ArrayList<>();
         for(Integer i: curr)
            temp.add(i);
         res.add(temp);
      }
      
      allRootToNodePath(node.left, data, curr, res);
      allRootToNodePath(node.right, data, curr, res);
      curr.remove(curr.size() - 1);
  }

===================================================

7.Path to Leaf Sum in Range.java 
------------------------------------
// Using StringBuilder
public static void pathToLeafFromRoot(Node node, StringBuilder path, int sum, int lo, int hi){
      if(node == null) return;
      
      sum += node.data;
      path.append(node.data);
      path.append(" ");
      
      if(node.left == null && node.right == null){
          // leaf node
          if(sum >= lo && sum <= hi)
            System.out.println(path);

          path.deleteCharAt(path.length() - 1);
          for(int i=path.length() - 1; i>=0 && path.charAt(i) != ' '; i--){
              path.deleteCharAt(i);
          }    
          return;
      }      
      
      pathToLeafFromRoot(node.left, path, sum, lo, hi);
      pathToLeafFromRoot(node.right, path, sum, lo, hi);
      
      path.deleteCharAt(path.length() - 1);
      for(int i=path.length() - 1; i>=0 && path.charAt(i) != ' '; i--){
          path.deleteCharAt(i);
      }
  }

// Using String
public static void pathToLeafFromRoot(Node node, String path, int sum, int lo, int hi){
      if(node == null) return;
      
      sum += node.data;
      path = path + node.data + " ";
      
      if(node.left == null && node.right == null){
          // leaf node
          if(sum >= lo && sum <= hi)
            System.out.println(path);
          
          return;
      }      
      
      pathToLeafFromRoot(node.left, path, sum, lo, hi);
      pathToLeafFromRoot(node.right, path, sum, lo, hi);
}

===================================================
8.Remove Leaves.java
------------------------------------
public static Node removeLeaves(Node node){
      if(node == null) return null;
      
      // leaf node -> delete node
      if(node.left == null && node.right == null)
        return null;
        
      Node leftChild = removeLeaves(node.left);
      Node rightChild = removeLeaves(node.right);
      
      node.left = leftChild;
      node.right = rightChild;
      
      // non-leaf node
      return node;
  }


  // void return type : 1 edge case is not handled: root is leaf (1 node)
  public static void removeLeaves(Node node){
      if(node == null) return; // root is null (0 nodes)
      
      if(node.left != null){
          // if left child is leaf node
          if(node.left.left == null && node.left.right == null){
              node.left = null;
          } else {
            removeLeaves(node.left);   
          }
      } 
      
      if(node.right != null){
          // if right child is leaf node
          if(node.right.left == null && node.right.right == null){
              node.right = null;
          } else {
              removeLeaves(node.right);
          }
      }
  }

// in main method
// removeLeaves(root)
// root = removeLeaves(root);
===================================================

9.Single Child Nodes.java
------------------------------------
public static void printSingleChildNodes(Node node, Node parent){
      if(node == null) return;
      
      if(parent != null && parent.left == null){
          System.out.println(node.data);
      }
      
      if(parent != null && parent.right == null){
          System.out.println(node.data);
      }
      
      printSingleChildNodes(node.left, node);
      printSingleChildNodes(node.right, node);
  }
  
  public static void printSingleChildNodes(Node node){
      if(node == null) return;

    //   if(node.left == null && node.right == null){
    //       // leaf node
    //       return;
    //   }
      
    //   if(node.left != null){
    //       System.out.println(node.right.data);
    //   }
      
    //   if(node.right == null){
    //       System.out.println(node.left.data);
    //   }
    
      if((node.left == null) ^ (node.right == null)){
          
          if(node.left == null)
            System.out.println(node.right.data);
          else System.out.println(node.left.data);
      }
      
      printSingleChildNodes(node.left);
      printSingleChildNodes(node.right);
}
===================================================
10.Tilt of Binary Tree.java
------------------------------------
static int tilt = 0;
  public static int tilt(Node node){
    if(node == null) return 0;
    
    int lsum = tilt(node.left);
    int rsum = tilt(node.right);
    
    int tiltAtnode = Math.abs(lsum - rsum);
    tilt += tiltAtnode;
    
    return lsum + rsum + node.data;
  }
===================================================

11. Traversals.java 
------------------------------------
// Level Order - Linewise 
public static void levelOrder(Node node) {
     Queue<Node> q = new ArrayDeque<>();
     q.add(node);
     
     while(q.size() > 0){
         
        int counter = q.size();
        for(int i=0; i<counter; i++){
            
            Node par = q.remove();
            System.out.print(par.data + " ");
            
            if(par.left != null)
                q.add(par.left);
                
            if(par.right != null)
                q.add(par.right);
            
        }
        
        System.out.println();
     }
  }

public static void preorder(Node root){
      if(root == null) return;
      
      System.out.print(root.data + " ");
      preorder(root.left);
      preorder(root.right);
  }
  
  public static void inorder(Node root){
      if(root == null) return;
      
      inorder(root.left);
      System.out.print(root.data + " ");
      inorder(root.right);
  }
  
  public static void postorder(Node root){
      if(root == null) return;
      
      postorder(root.left);
      postorder(root.right);
      System.out.print(root.data + " ");
  }
  
public static class Pair {
    Node node;
    int state;

    Pair(Node node, int state) {
      this.node = node;
      this.state = state;
    }
  }

// Iterative Pre, In & Postorder Traversals

  public static void iterativePrePostInTraversal(Node root) {
    Stack<Pair> stk = new Stack<>();
    stk.push(new Pair(root, -1));
    
    ArrayList<Integer> preorder = new ArrayList<>();
    ArrayList<Integer> inorder = new ArrayList<>();
    ArrayList<Integer> postorder = new ArrayList<>();
    
    while(!stk.isEmpty()){
        Pair par = stk.peek();
        
        if(par.state == -1){
            // preorder
            preorder.add(par.node.data);
                
            if(par.node.left != null){
                stk.push(new Pair(par.node.left, -1));
            }
            par.state++;
            
        } else if(par.state == 0){
            // inorder
            inorder.add(par.node.data);
            
            if(par.node.right != null){
                stk.push(new Pair(par.node.right, -1));
            }
            par.state++;
            
        } else if(par.state == 1){
            // postorder
            postorder.add(par.node.data);
            stk.pop();
        }
    }
    
    for(Integer i: preorder) System.out.print(i + " ");
    System.out.println();
    for(Integer i: inorder) System.out.print(i + " ");
    System.out.println();
    for(Integer i: postorder) System.out.print(i + " ");
    System.out.println();
  }
===================================================
12.
------------------------------------

===================================================

13.
------------------------------------

===================================================
14.
------------------------------------

===================================================
15.
------------------------------------

===================================================
16.
------------------------------------

===================================================
17.
------------------------------------

===================================================
18.
------------------------------------

===================================================
19.
------------------------------------

===================================================
20.
------------------------------------

===================================================

21.
------------------------------------


===================================================
22.
------------------------------------

===================================================
23.
------------------------------------

===================================================
24.
------------------------------------

===================================================
25.
------------------------------------

===================================================
26.
------------------------------------

===================================================
27.
------------------------------------

===================================================
28.
------------------------------------

===================================================
29.
------------------------------------

===================================================
30.
------------------------------------

===================================================