https://github.com/archit-aggarwal/Pepcoding-DSA

https://docs.google.com/spreadsheets/d/17S674wtLfaOn_1W_5Jpz6EQrgr7wIqdiRT8YxG2_wII/edit#gid=93987582

Recursion
===================================================
1.All Indices of Array.java

1. You are given a number n, representing the count of elements.
2. You are given n numbers.
3. You are given a number x. 
4. You are required to find the all indices at which x occurs in array a.
5. Return an array of appropriate size which contains all indices at which x occurs in array a.

Note -> The online judge can't force you to write the function recursively but that is what the spirit of question is. 
Write recursive and not iterative logic. The purpose of the question is to aid learning recursion and not test you.

Input Format:
A number n
n1
n2
.. n number of elements
A number x

I/P: 
6
15
11
40
4
4
9

OP : 
3
4
-----------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        int[] arr = new int[n];

        for (int i = 0; i < n; i++) {
            arr[i] = Integer.parseInt(br.readLine());
        }
        int x = Integer.parseInt(br.readLine());
        int[] iarr = allIndices(arr, x, 0, 0);

        if(iarr.length == 0){
            System.out.println();
            return;
        }

        for(int i = 0; i < iarr.length; i++){
            System.out.println(iarr[i]);
        }
    }

    public static int[] allIndices(int[] arr, int x, int idx, int counter) {
        // Base Case
        if(idx == arr.length)
        {
            int[] freq = new int[counter];
            return freq;
        }
        
        // 1. Update Counter if arr[idx] = x
        if(arr[idx] == x) counter++;
        
        // 2. Faith
        int[] freq = allIndices(arr, x, idx + 1, counter);
        
        //3. Update Values in freq array
        if(arr[idx] == x)
            freq[counter - 1] = idx;
        
        return freq;
    }

}

----------
import java.io.*;

import java.util.*;

public class Main {

  public static void main(String[] args) throws Exception {
    Scanner scn = new Scanner(System.in);
    int n =

    int[] arr = new int[n];

    for (int i = 0; i < n; i++) {
      arr[i] = scn.nextInt();
    }
    int x = scn.nextInt();
    int[] iarr = allIndices(arr, x, 0, 0);

    if (iarr.length == 0) {
      System.out.println();
      return;
    }

    for (int i = 0; i < iarr.length; i++) {
      System.out.println(iarr[i]);
    }
  }

  public static int[] allIndices(int[] arr, int x, int idx, int fsf) {
    if (idx == arr.length) {
      return new int[fsf];
    }

    int[] iarr;

    if (arr[idx] == x) {
      iarr = allIndices(arr, x, idx + 1, fsf + 1);
      iarr[fsf] = idx;
    } else {
      iarr = allIndices(arr, x, idx + 1, fsf);
    }

    return iarr;
  }

}
===================================================
2.First Index.java 
----------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int[] arr = new int[n];
        for(int i=0; i<n; i++)
            arr[i] = scn.nextInt();
        
        int x = scn.nextInt();
        int ans = firstIndex(arr, 0, x);
        System.out.println(ans);
    }

    public static int firstIndex(int[] arr, int idx, int x){
        if(idx == arr.length) return -1;
        if(arr[idx] == x) return idx;
        
        int val = firstIndex(arr, idx + 1, x);
        return val;
        
    }

}


===================================================
4.Get Keypad.java
------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        String str = scn.nextLine();
        
        ArrayList<String> res = getKPC(str);
        System.out.println(res);
    }
    
    static String[] keypad = {".;", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tu", "vwx", "yz" };
    
    public static ArrayList<String> getKPC(String str) {
        if(str.equals(""))
        {
            ArrayList<String> res = new ArrayList<>();
            res.add("");
            return res;
        }
        
        // 1. Faith
        ArrayList<String> tres = getKPC(str.substring(1));
        
        // 2. Meeting Expectation with Faith
        ArrayList<String> res = new ArrayList<>();
        char ch = str.charAt(0);
        
        for(int i=0; i<keypad[ch - '0'].length(); i++)
        {
            char letter = keypad[ch - '0'].charAt(i);
            
            for(String s: tres)
                res.add(letter + s);
        }
        
        return res;
    }

}

IP: 78
OP : [tv, tw, tx, uv, uw, ux]
===================================================
5.Get Maze Paths with Jumps.java
------------------------------
import java.io.*;
import java.util.*;
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int m = scn.nextInt();
        ArrayList<String> res = getMazePaths(0, 0, n-1, m-1);
        System.out.println(res);
    }

    // sr - source row
    // sc - source column
    // dr - destination row
    // dc - destination column
    public static ArrayList<String> getMazePaths(int srcRow, int srcCol, int destRow, int destCol) {
        if(srcRow == destRow && srcCol == destCol)
        {
            // Positive Base Case
            ArrayList<String> paths = new ArrayList<>();
            paths.add("");
            return paths;
        }
        else if(srcRow > destRow || srcCol > destCol)
        {
            // Negative Base Case
            ArrayList<String> paths = new ArrayList<>();
            return paths;             
        }
        
        ArrayList<String> res = new ArrayList<>();
        
        // Horizontal
        for(int i=1; srcCol + i <= destCol; i++)
        {
            ArrayList<String> hpaths = getMazePaths(srcRow, srcCol + i, destRow, destCol);
            for(String s: hpaths)
                res.add("h" + i + s);
        }
        
        // Vertical
        for(int i=1; srcRow + i <= destRow; i++)
        {
            ArrayList<String> vpaths = getMazePaths(srcRow + i, srcCol, destRow, destCol);
            for(String s: vpaths)
                res.add("v" + i + s);
        }
        
        // Diagonal
        for(int i=1; srcCol + i <= destCol && srcRow + i <= destRow; i++)
        {
            ArrayList<String> dpaths = getMazePaths(srcRow + i, srcCol + i, destRow, destCol);
            for(String s: dpaths)
                res.add("d" + i + s);
        }
        
        return res;
    }

}

===================================================
6.Get Maze Paths.java 
-------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception     {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int m = scn.nextInt();
        ArrayList<String> res = getMazePaths(0, 0, n-1, m-1);
        System.out.println(res);
    }

    public static ArrayList<String> getMazePaths(int srcRow, int srcCol, int destRow, int destCol) {
        if(srcRow == destRow && srcCol == destCol)
        {
            // Positive Base Case
            ArrayList<String> paths = new ArrayList<>();
            paths.add("");
            return paths;
        }
        else if(srcRow > destRow || srcCol > destCol)
        {
            // Negative Base Case
            ArrayList<String> paths = new ArrayList<>();
            return paths;            
        }
        
        
        // Faith - 1
        ArrayList<String> vpaths = getMazePaths(srcRow + 1, srcCol, destRow, destCol);
        
        // Faith - 2
        ArrayList<String> hpaths = getMazePaths(srcRow, srcCol + 1, destRow, destCol);
        
        // Meeting Expectation
        ArrayList<String> res = new ArrayList<>();
        
        for(String s: hpaths)
            res.add("h" + s);
        
        for(String s: vpaths)
            res.add("v" + s);
        
        return res;
    }

}
===================================================

7.Get Stair Paths - I.java
-------------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        
        ArrayList<String> res = getStairPaths(n);
        System.out.println(res);
    }

    public static ArrayList<String> getStairPaths(int n) {
        if(n < 0)
        {
            // Negative Base Case : No Path Possible
            ArrayList<String> paths = new ArrayList<>();
            return paths;
        }
        else if(n == 0)
        {
            // Positive Base Case : 1 Path Possible
            ArrayList<String> paths = new ArrayList<>();
            paths.add("");
            return paths;
        }
        
        // Lets go with the flow. We will see both success and failure in our 
        // journey. No worries, let's explore all paths, we will handle success
        // and failure with complete courage.
      
        // Faith
        ArrayList<String> futurePaths1 = getStairPaths(n - 1);
        ArrayList<String> futurePaths2 = getStairPaths(n - 2);
        ArrayList<String> futurePaths3 = getStairPaths(n - 3);
        
        // Meeting Expectation
        ArrayList<String> res = new ArrayList<>();
        for(String s1: futurePaths1)
            res.add(1 + s1);
        for(String s2: futurePaths2)
            res.add(2 + s2);
        for(String s3: futurePaths3)
            res.add(3 + s3);
        
        return res;
    }

}
===================================================
8.Get Stair Paths - II.java
------------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        
        ArrayList<String> res = getStairPaths(n);
        System.out.println(res);
    }

    public static ArrayList<String> getStairPaths(int n) {
    
        if(n == 0)
        {
            // Positive Base Case : 1 Path Possible
            ArrayList<String> paths = new ArrayList<>();
            paths.add("");
            return paths;
        }
        
        ArrayList<String> res = new ArrayList<>();
        
        // Only Edges leading to success are taken into account
        // hence no need to handle failure (negative base case).
      
        if(n - 1 >= 0)
        {
            ArrayList<String> futurePaths1 = getStairPaths(n - 1);
            for(String s1: futurePaths1)
                res.add(1 + s1);
        }
        
        if(n - 2 >= 0)
        {
            ArrayList<String> futurePaths2 = getStairPaths(n - 2);
            for(String s2: futurePaths2)
                res.add(2 + s2);
        }
        
        if(n - 3 >= 0)
        {
            ArrayList<String> futurePaths3 = getStairPaths(n - 3);
            for(String s3: futurePaths3)
                res.add(3 + s3);
        }
        
        return res;
    }

}
===================================================

9.Get Subsequences.java 
------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        String str = scn.nextLine();
        
        ArrayList<String> res = gss(str);
        System.out.println(res);
    }

    public static ArrayList<String> gss(String str) {
        // Base Case
        if(str.length() == 0)
        {
            ArrayList<String> res = new ArrayList<>();
            res.add("");
            return res;
        }
        
        
        ArrayList<String> sres = gss(str.substring(1));
        ArrayList<String> res = new ArrayList<>();
        
        for(String s: sres)
        {
            // Append ""
            res.add("" + s);
        }
        
        for(String s: sres)
        {
            // Append first character 
            res.add(str.charAt(0) + s);
        }
        
        return res;
    }

}

===================================================

11.Last Index.java
-----------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int[] arr = new int[n];
        for(int i=0; i<n; i++)
            arr[i] = scn.nextInt();
        
        int x = scn.nextInt();
        int ans = lastIndex(arr, arr.length - 1, x);
        System.out.println(ans);
    }

    public static int lastIndex(int[] arr, int idx, int x){
        if(idx < 0) return -1;
        if(arr[idx] == x) return idx;
        
        int val = lastIndex(arr, idx - 1, x);
        return val;
    }

}
===================================================
12.Max in Array.java
-------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int[] arr = new int[n];
        for(int i=0; i<n; i++)
            arr[i] = scn.nextInt();
            
        int max = maxOfArray(arr, 0);
        System.out.println(max);
    }

    public static int maxOfArray(int[] arr, int idx){
        // Base Case
        if(idx == arr.length)
        { return Integer.MIN_VALUE; }
        
        // 1. Maximum of Remaining Array
        int k1 = maxOfArray(arr, idx + 1);
        
        // 2. Max of k1 & arr[idx]
        int max = Math.max(k1, arr[idx]);
        return max;
    }

}
===================================================

14. Power Linear.java
------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int x = scn.nextInt();
        int n = scn.nextInt();
        
        int xpn = power(x, n);
        System.out.println(xpn);
    }

    public static int power(int x, int n){
        // Base Case: x^0 = 1
        if(n == 0) return 1;
        
        // 1. Calculate x ^ n-1 using Faith
        int xpn1 = power(x, n-1);
        
        // 2. Calculate x ^ n using x ^ n-1
        int xpn = xpn1 * x;
        
        // 3. Calculate x ^ n
        return xpn;
    }

}
===================================================
15.Power Logarithmic.java
-----------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner scn = new Scanner(System.in);
        int x = scn.nextInt();
        int n = scn.nextInt();
        int xpn = power(x, n);
        System.out.println(xpn);
    }
    
    // Number of calls in power2 : HomeWork
//     public static int power2(int x, int n)
//     {
//         if(n == 0) return 1;
        
//         int xpn = power2(x, n/2) * power2(x, n/2);
//         if(n % 2 == 1) xpn = xpn * 2;
//         return xpn;
//     }
    
    public static int power(int x, int n){
        // Base Case x^0 = 1
        if(n == 0) return 1;
        
        // 1. Faith : x ^ n/2
        int xpnb2 = power(x, n/2);
        
        // 2. x^n = x^n/2 * x^n/2
        int xpn = xpnb2 * xpnb2;
        
        // 3. If n is odd
        if(n % 2 == 1) xpn = xpn * x;
        
        // 4. Return
        return xpn;
    }

}
===================================================
16. Print Array in Reverse.java
-----------------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int[] arr = new int[n];
        for(int i=0; i<n; i++)
            arr[i] = scn.nextInt();
        
        displayArrReverse(arr, 0);
    }

    public static void displayArrReverse(int[] arr, int idx) {
        // Base Case
        if(idx == arr.length) return;
        
        // 1. Faith
        displayArrReverse(arr, idx + 1);
        
        // 2. Print arr of idx
        System.out.println(arr[idx]);
        
    }

}
===================================================
17. Print Array.java
-------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int[] arr = new int[n];
        for(int i=0; i<n; i++)
            arr[i] = scn.nextInt();
        
        displayArr(arr, 0);
    }

    public static void displayArr(int[] arr, int idx){
        // Base Case
        if(idx == arr.length) return;
        
        // 1. Print arr of idx
        System.out.println(arr[idx]);
        
        // 2. Faith
        displayArr(arr, idx + 1);
    }

}
===================================================
18.Print Decreasing.java 
----------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        printDecreasing(n);
    }

    public static void printDecreasing(int n){
        // Base Case
        if(n == 0) return;
        
        // 1st statement -> Work -> Print
        System.out.println(n);
        
        // 2nd statement -> Faith 
        printDecreasing(n - 1);
    }

}

===================================================
20. Print Increasing Decreasing.java
--------------------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        pdi(n);
    }

    public static void pdi(int n){
        // Base Case
        if(n == 0) return;
        
        // 1st statement 
        System.out.println(n);
        
        // 2nd statement -> Faith
        pdi(n-1);
        
        // 3rd statement
        System.out.println(n);
    }

}
===================================================
21.Print Increasing.java 
-------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        printIncreasing(n);
    }

    public static void printIncreasing(int n){
        // Base Case
        if(n == 0) return;
        
        // 1st statement -> Faith
        printIncreasing(n-1);
        
        // 2nd statement -> Work (Meeting Expectation with Faith)
        System.out.println(n);
    }

}

===================================================

22.Print Keypad.java
-------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        String input = scn.nextLine();
        String output = "";
        printKPC(input, output);
    }
    static String[] keypad = {".;", "abc", "def", 
        "ghi", "jkl", "mno", "pqrs", "tu", "vwx", "yz" };
    
    public static void printKPC(String input, String output)     {
        if(input.length() == 0)
        {
            System.out.println(output);
            return;
        }
        
        char ch = input.charAt(0);
        
        // for(char letter: keypad[ch - '0'].toCharArray())
        // Below for loop can be converted with above for each loop.
        
        for(int i=0; i<keypad[ch - '0'].length(); i++)
        {
            char letter = keypad[ch - '0'].charAt(i);
            printKPC(input.substring(1), output + letter);
        }
    }

}
===================================================

23. Print Maze Paths with Jumps.java
---------------------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        int m = Integer.parseInt(br.readLine());
        printMazePaths(0, 0, n - 1, m - 1, "");
    }

    public static void printMazePaths(int sr, int sc, int dr, int dc, String psf) {
        if(sr > dr || sc > dc){
            return;
        }

        if(sr == dr && sc == dc){
            System.out.println(psf);
            return;
        }

        for(int move = 1; move <= dc - sc; move++){
            printMazePaths(sr, sc + move, dr, dc, psf + "h" + move);
        }
        
        for(int move = 1; move <= dr - sr; move++){
            printMazePaths(sr + move, sc, dr, dc, psf + "v" + move);
        }

        for(int move = 1; move <= dc - sc && move <= dr - sr; move++){
            printMazePaths(sr + move, sc + move, dr, dc, psf + "d" + move);
        }
    }
}
===================================================

24. Print Maze Paths.java
-----------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        int m = Integer.parseInt(br.readLine());
        printMazePaths(0, 0, n - 1, m - 1, "");
    }

    public static void printMazePaths(int sr, int sc, int dr, int dc, String psf) {
        if(sr > dr || sc > dc){
            return;
        }

        if(sr == dr && sc == dc){
            System.out.println(psf);
            return;
        }

        printMazePaths(sr, sc + 1, dr, dc, psf + "h");
        printMazePaths(sr + 1, sc, dr, dc, psf + "v");
    }
}
===================================================
25. Print Permutations.java
--------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        String str = scn.nextLine();
        
        printPermutations(str, "");
    }

    public static void printPermutations(String input, String output) {
        if(input.length() == 0)
        {
            System.out.println(output);
            return;
        }
        
        
        // Choices (Edges) for string "abc" are a, b, c
        for(int i=0; i<input.length(); i++)
        {
            char choice = input.charAt(i);
            String newInput = input.substring(0, i) + input.substring(i + 1);
            printPermutations(newInput, output + choice);
        }
        
    }

}
===================================================
26.Print Stair Paths - I.java
-----------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int input = scn.nextInt();
        String output = "";
        printStairPaths(input, output);
    }

    public static void printStairPaths(int input, 
                                String output) {
        if(input == 0)
        {
            // Positive Base Case
            System.out.println(output);
            return;
        }
        else if(input < 0)
        {
            // Negative Base Case
            return;
        }
        
        // All paths explored, hence, both types of base cases required.
        
        printStairPaths(input - 1, output + 1);
        printStairPaths(input - 2, output + 2);
        printStairPaths(input - 3, output + 3);
    }

}

===================================================

27.Print Stair Paths - II.java
---------------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int input = scn.nextInt();
        String output = "";
        printStairPaths(input, output);
    }

    public static void printStairPaths(int input, 
                                String output) {
        if(input == 0)
        {
            // Positive Base Case
            System.out.println(output);
            return;
        }
        
        // Har kadam soch samajh kar rakha hai, khai me kabhi nahi girenge
        // no need of negative base case, because edges leading to them are removed
      
        if(input - 1 >= 0)
            printStairPaths(input - 1, output + 1);
        
        if(input - 2 >= 0)
            printStairPaths(input - 2, output + 2);
        
        if(input - 3 >= 0)
            printStairPaths(input - 3, output + 3);
    }

}
===================================================

28.Print Subsequences.java
------------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        String input = scn.nextLine();
        String output = "";
        printSS(input, output);
    }

    public static void printSS(String input, String output) {
        if(input.length() == 0)
        {
            // Base Case: Just Print then return,
            // -> Enjoy, no need to return any arraylist
            System.out.println(output);
            return;
        }
        
        
        // First Character
        char ch = input.charAt(0);
        
        // 1. Character Present in Subsequence
        printSS(input.substring(1), output + ch);
        
        // 2. Character Not Present in Subsequence
        printSS(input.substring(1), output);
    }

}


// Method 2: Using ArrayList
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        String str = scn.nextLine();
        
        ArrayList<Character> subSet = new ArrayList<>();
        printSS(str, 0, subSet);
    }

    public static void printSS(String str, int idx, ArrayList<Character> subSet) {
        if(idx == str.length()){
            for(Character i: subSet){
                System.out.print(i);
            }
            System.out.println();
            return;
        }
        
        // yes
        subSet.add(str.charAt(idx));
        printSS(str, idx + 1, subSet);
        
        subSet.remove(subSet.size() - 1);
        printSS(str, idx + 1, subSet);
    }

}


===================================================

30. Tower of Hanoi.java

--------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int t1 = scn.nextInt();
        int t2 = scn.nextInt();
        int t3 = scn.nextInt();
        
        toh(n, t1, t2, t3);
    }

    public static void toh(int n, int t1, int t2, int t3){
        if(n == 0) return;
        
        // 1. Faith n-1 disks from t1 to t3 using t2
        toh(n-1, t1, t3, t2);
        
        // 2. Move nth disk from t1 to t2
        System.out.println(n + "[" + t1 + " -> " + t2 + "]");
        
        // 3. Faith: n-1 disks from t3 to t2 using t1
        toh(n-1, t3, t2, t1);
    }

}
===================================================
19. Print Encodings.java
-------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        String input = scn.nextLine();
        String output = "";
        printEncodings(input, output);
    }

    public static void 
            printEncodings(String input, String output) {
        if(input.length() == 0)
        {
            System.out.println(output);
            return;
        }
        
        // 1. Extract one character from input
        char ch1 = input.charAt(0);
        if(ch1 >= '1' && ch1 <= '9')
            printEncodings(input.substring(1), output + (char)(ch1 - '0' + 96));
        
        
        if(input.length() > 1) 
        // Two characters can only be extracted only if there are atleast 2 characters present
        {
            // 2. Extract two characters from input
            String ch12 = input.substring(0, 2);
            int ch12Int = Integer.parseInt(ch12);
            
            // Condition for ch12 in "10" - "26"
            if(ch12Int >= 10 && ch12Int <= 26)
                printEncodings(input.substring(2), output + (char)(ch12Int + 96));
        }
        
    }

}

===================================================
3.Flood Fill.java
---------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int m = scn.nextInt();
        int[][] arr = new int[n][m];
        boolean[][] visited = new boolean[n][m];
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                arr[i][j] = scn.nextInt();
                visited[i][j] = false;
            }
        }
        
        floodfill(arr, 0, 0, "", visited);
    }
    
    public static void floodfill(int[][] maze, int sr, int sc, String output, boolean[][] visited) {
        // -ve base
        if(sr < 0 || sc < 0 || sr >= maze.length || sc >= maze[0].length || maze[sr][sc] == 1 || visited[sr][sc] == true)
        {
            return;
        }
        
        // +ve base
        if(sr == maze.length - 1 && sc == maze[0].length - 1)
        {
            System.out.println(output);
            return;
        }
        
        visited[sr][sc] = true;
        
        // top
        floodfill(maze, sr - 1, sc, output + "t", visited);
        
        // left
        floodfill(maze, sr, sc - 1, output + "l", visited);
        
        // down
        floodfill(maze, sr + 1, sc, output + "d", visited);
        
        // right
        floodfill(maze, sr, sc + 1, output + "r", visited);
        
        // backtracking step
        visited[sr][sc] = false;
    }
}
===================================================
29.Target Sum Subsets.java
----------------------------
import java.io.*;
import java.util.*;

public class Main {

  public static void main(String[] args) throws Exception {
    Scanner scn = new Scanner(System.in);
    int n = scn.nextInt();
    int[] arr = new int[n];
    for(int i=0; i<n; i++)
        arr[i] = scn.nextInt();
    int target = scn.nextInt();
    
    printTargetSumSubsets(arr, 0, "", 0, target);
  }

  public static void printTargetSumSubsets(int[] arr, int idx, String output, int currSum, int targetSum) {
    if (idx == arr.length)
    {
      if(currSum == targetSum) {
        System.out.println(output + ".");
      }
      return;
    }
    
    // Pruning Step
    if(currSum > targetSum) return;    
    
    // First Character
    int ele = arr[idx];

    // 1. Integer Present in Subset
    printTargetSumSubsets(arr, idx + 1, output + ele + ", ", currSum + ele, targetSum);

    // 2. Integer Not Present in Subset
    printTargetSumSubsets(arr, idx + 1, output, currSum, targetSum);
  }

}
===================================================
13.N Queens.java
-----------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int[][] chess = new int[n][n];
        printNQueens(chess, "", 0);
    }
    
    public static boolean isQueenSafe(int[][] chess, int row, int col)
    {
        // column
        for(int i=row-1; i>=0; i--)
            if(chess[i][col] == 1) return false;
        
        // 1st diagnol
        for(int i=row-1, j=col-1; i>=0 && j>=0; i--, j--)
            if(chess[i][j] == 1) return false;
        
        // 2nd diagnol
        for(int i=row-1, j=col+1; i>=0 && j<chess.length; i--, j++)
            if(chess[i][j] == 1) return false;
        
        return true;
    }

    public static void printNQueens(int[][] chess, String qsf, int row) {
        if(row == chess.length)
        {
            // +ve base case
            System.out.println(qsf + ".");
            return;
        }
        
        
        // options : columns
        for(int col=0; col<chess[0].length; col++)
        {
            if(isQueenSafe(chess, row, col))
            {
                chess[row][col] = 1;
                // faith : row
                printNQueens(chess, qsf + row + "-" + col + ", ", row + 1);
                // backtracking step
                chess[row][col] = 0;
            }
        }
    }
}

===================================================
10.Knight's Tour.java
------------------------
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception     {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int r = scn.nextInt();
        int c = scn.nextInt();
        int[][] chess = new int[n][n];
        printKnightsTour(chess, r, c, 1);
    }

    public static void printKnightsTour(int[][] chess, int r, int c, int move) 
    {
        if(r < 0 || r >= chess.length || c < 0 || c >= chess.length || chess[r][c] > 0)
        {
            // -ve base case
            return;
        }
        
        if(move == chess.length * chess.length)
        {
            // + ve base case
            chess[r][c] = move;
            displayBoard(chess);
            chess[r][c] = 0;
            return;
        }
        
        chess[r][c] = move;
        printKnightsTour(chess, r-2, c+1, move + 1);
        printKnightsTour(chess, r-1, c+2, move + 1);
        printKnightsTour(chess, r+1, c+2, move + 1);
        printKnightsTour(chess, r+2, c+1, move + 1);
        printKnightsTour(chess, r+2, c-1, move + 1);
        printKnightsTour(chess, r+1, c-2, move + 1);
        printKnightsTour(chess, r-1, c-2, move + 1);
        printKnightsTour(chess, r-2, c-1, move + 1);
        chess[r][c] = 0;
    }

    public static void displayBoard(int[][] chess){
        for(int i = 0; i < chess.length; i++){
            for(int j = 0; j < chess[0].length; j++){
                System.out.print(chess[i][j] + " ");
            }
            System.out.println();
        }

        System.out.println();
    }
}
===================================================
31.
===================================================
32.

===================================================
33.

===================================================


===================================================
